================================================================================
Title: Parameterization of {gamma}, e^{+/-}^ and Neutrino Spectra Produced
       by p-p Interaction in Astronomical Environment
Authors: Kamae T., Karlsson N., Mizuno T., Abe T., Koi T.
================================================================================

Code names: 

antinue.c  
antinumu.c  
elec.c  
nue.c  
numu.c  
params.c  
posi.c  
sigma.c  
test.c

Language: C

Code tested under the following compilers/operating systems:
  RedHat Enterprise Linux 3.0 (Linux kernel 2.4.21) with gcc 3.2.3
  RedHat Linux 7.3 (Linux kernel 2.4.18) with gcc 3.2 (on VMWare 3)

Description of input data: See below.

Description of output data: See below.

System requirements: See below.

Calls to external routines: None

Additional comments: 

Optimization contributions by John Houck (houck@space.mit.edu)

Description
-----------

cparamlib is a simple library for calculation of fluxes for stable secondary particles
created in proton-proton interactions in astronomical environment according to the model
described in 
  Tuneyoshi Kamae, Niklas Karlsson, Tsunefumi Mizuno, Toshinori Abe, and Tatsumi Koi; 
  "Parameterization of $\gamma$, $e^{\pm}$ and Neutrino Spectra Produced by $p-p$ Interaction in Astronomical Environment"
to appear in Astrophysical Journal (2006).

Feel free to include the source code within your own program.

IMPORTANT! The maintainer cannot be held responsible for anything that is caused by using
this piece of code.

Requirements
------------

To build this library and the python wrapper one needs a working compiler, such as gcc, and must have SWIG
installed. SWIG is used to build the python wrapper code.

Build
-----

The library is now built using the autoconf/automake method:
./configure
make
make install

The user will most probably want to do
./configure --prefix=/your/path
to put the library in a non-standard path.

By default, the Python interface is not built. To build it, one would use
./configure --enable-pythonbuild
This will compile the code and when issuing "make install", the Python package will be put
in ${prefix}/lib/pythonN.N/site-packages.

On 64-bit systems the library directory might be ${prefix}/lib64 rather than ${prefix}/lib. To make
sure the library is installed in the correct directory, pass the --libdir=${prefix}/lib64 option to
./configure. For example
./configure --prefix=/your/path --libdir=/your/path/lib64 --enable-pythonbuild

Using the library
-----------------

There is one example program, params.c, that uses the library to calculate inclusive cross sections
for non-diffractive, diffractive, Delta1232 and Reson1600 processes and for all secondary particles.

Generally, the library is linked to your program using something like

gcc yourprogram.c -L/usr/lib -lm -lcparamlib -o yourprogram.bin

In the directory examples/ you will find two example programs that builds with the library and an
example Makefile. This Makefile must be modified so that the two lines

  INCLUDE_DIR = /usr/include
  LIB_DIR = /usr/lib

points to the location where you installed the library (--prefix option with ./configure). The
default is /usr/include and /usr/lib. Also, do not forget to set LD_LIBRARY_PATH if you install
the library somewhere else than /usr/lib.

We have chosen not to build these example binaries with autoconf for two reasons:

  1) This way a normal user can use the Makefile as a template
  2) This does not clutter /usr/bin with unwanted binaries

In Python you import the cparamlib package, like this

import cparamlib

Subroutines
-----------

The subroutines in the libraryare used to calculate parameters and inclusive cross sections
according to tables 3 through 9.

Parameter calculation:

Step one is to calculate the parameter arrays a,b,c and d given in tables 3
through 9. Do this by calling the four functions for each of the secondary
particle species. Suffices for the functions are:
  nd		 contribution from non-diffractive process 
  diff	 contribution from diffractive process 
  delta	 contribution from Delta(1232) excitation process 
  res		 contribution from Res(1600) excitation process
				 (note that Res(1600) represents a collaction of resonances) 

Arguments:
  Tp			proton kinetic energy in GeV
  a,b,c,d pointer to where the parameter array will be stored
					dimensions are a[9], b[8], c[5], d[5]

Gamma-rays (table 3):
  void gamma_param_nd(double Tp, double* a);
  void gamma_param_diff(double Tp, double* b);
  void gamma_param_delta(double Tp, double* c);
  void gamma_param_res(double Tp, double* d);

Electrons (table 4):
  void elec_param_nd(double Tp, double* a);
  void elec_param_diff(double Tp, double* b);
  void elec_param_delta(double Tp, double* c);
  void elec_param_res(double Tp, double* d);

Positrons (table 5):
  void posi_param_nd(double Tp, double* a);
  void posi_param_diff(double Tp, double* b);
  void posi_param_delta(double Tp, double* c);
  void posi_param_res(double Tp, double* d);

Electron neutrinos (table 6):
	void nue_param_nd(double Tp, double* a);
  void nue_param_diff(double Tp, double* b);
  void nue_param_delta(double Tp, double* c);
  void nue_param_res(double Tp, double* d);

Electron anti-neutrinos (table 7):
  void antinue_param_nd(double Tp, double* a);
  void antinue_param_diff(double Tp, double* b);
  void antinue_param_delta(double Tp, double* c);
  void antinue_param_res(double Tp, double* d);

Muon neutrinos (table 8):
  void numu_param_nd(double Tp, double* a);
  void numu_param_diff(double Tp, double* b);
  void numu_param_delta(double Tp, double* c);
  void numu_param_res(double Tp, double* d);

Muon neutrinos (table 8):
  void antinumu_param_nd(double Tp, double* a);
  void antinumu_param_diff(double Tp, double* b);
  void antinumu_param_delta(double Tp, double* c);
  void antinumu_param_res(double Tp, double* d);

Secondary particle id's:

The library uses the following id's for secondary particle species
ID_GAMMA				0
ID_ELECTRON			1
ID_POSITRON			2
ID_NUE					3
ID_NUMU					4
ID_ANTINUE			5
ID_ANTINUMU			6

Inclusive cross sections:

Inclusive cross sections in mb are calculated separately for the four contributions
(non-diff, diff, delta and res). Note that that delta does not contribute to electrons
or electrons anti-neutrinos in the present modeling.

Arguments:
  particle  id of the secondary particle to calculate for
						(see list above)
  E					energy of the secondary particle in GeV
  Tp				proton kinetic energy in GeV
  a,b,c,d		parameter array for each species
						(note that these depend on the particle species)

Individual contributions are calculated with:
  double sigma_incl_nd(int particle, double E, double Tp, double* a);
  double sigma_incl_diff(int particle, double E, double Tp, double* b);
  double sigma_incl_delta(int particle, double E, double Tp, double* c);
  double sigma_incl_res(int particle, double E, double Tp, double* d);

Total inclusive cross sections is calculated with:
  double sigma_incl(int particle, double E, double Tp);

Inelastic p-p cross sections:

Functions for calculating sigma_pp according to equations 1-4. Pp is the proton momentum
in GeV/c.
  double sigma_pp_nd(double Pp);
  double sigma_pp_diff(double Pp);
  double sigma_pp_delta(double Pp);
  double sigma_pp_res(double Pp);

Test program
------------

A test program "test.c" shows how subroutines in the library lcparamlib can be used. 

To run the program, make sure that two executables "params" and "test" are made by
the "make all" command you have executed. In the directory where the two executables
are, execute "params" to create the parameters,
  > ./params 
You will then find 28 files with extension .dat in the directory.

Then execute "test" as,
  > ./test
  
A data file gammaspectrum.csv contains the E*dSigma(E)/dlog(E) of the gamma-ray
spectrum produced by continuum protons with power-law-index of 2 from the pion
threshold to Tp=512TeV. The first column of gammaspectrum.csv is log10 of gamma-ray
energy at log(E)=0.05 steps and the log(E*dSigma/dlogE) is log10 of E*dSigma(E)/dlog(E)
for each bin. Here E is in GeV and Sigma is the inclusive pp-gamma production
cross section in mb.  

You can change the program "test.c" to calculate secondary particle spectra produce
by any incident proton spectrum. You are reminded to "make clean" and "make all"
to create a new executable.

================================================================================
The AAS gives permission to anyone who wishes to use these subroutines
to run their own calculations.  Permission to republish or reuse these
routines should be directed to the Executive Officer of the AAS.

Note that the AAS does not take responsibility for the content of the 
source code.  Potential users should be wary of applying the code
to conditions that the code was not written to model and the accuracy of
the code may be affected when compiled and executed on different systems.
================================================================================
